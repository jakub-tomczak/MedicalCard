@model MedicalCard.ViewModels.PatientSummary;
@{
    ViewData["Title"] = "ViewPatient";
    var timelineIterator = 0;
    var examinations = new Dictionary<string, List<MedicalCard.Misc.PatientValueExamination>>();
}
<link rel="stylesheet" type="text/css" href="~/css/timeline.css">
<link rel="stylesheet" type="text/css" href="~/css/Observation.css">
<link rel="stylesheet" type="text/css" href="~/css/TabView.css">
<link rel="stylesheet" type="text/css" href="~/css/Chart.css">
<script src="~/js/TabView.js"></script>
<script src="~/lib/chartjs/utils.js"></script>
<script src="~/lib/chartjs/Chart.bundle.min.js"></script>
<script src="~/js/DrawChart.js"></script>

@if (ViewBag.Error != null && Model == null)
{
    <h1>Błąd <p style="color: coral">@(ViewBag.ErrorMessage)</p></h1>
}
else
{
    @if (Model?.Data == null)
    {
        <h2>Brak danych o pacjencie</h2>
    }
    else
    {
        <h2>Metryka pacjenta @(Model.Data.Name.FirstOrDefault()?.Family ?? "")</h2>
        <table class="table">
            <tr>
                <td>Nazwisko</td>
                <td>@(Model.Data.Name.FirstOrDefault()?.Family ?? "brak danych")</td>
            </tr>
            <tr>
                <td>Imię/imiona</td>
                <td>@(Model.Data.Name.FirstOrDefault()?.Given.Aggregate((x, y) => $"{x} {y}") ?? "brak danych")</td>
            </tr>
            <tr>
                <td>Data urodzenia</td>
                <td>@(Model.Data.BirthDate)</td>
            </tr>
            <tr>
                <td>
                    Dane kontaktowe
                </td>
                <td>
                    @foreach (var contact in Model.Data.Telecom)
                    {
                        @($"{contact.System}: {contact.Value}")<br />;
                    }
                </td>
            </tr>
            <tr></tr>
        </table>
        @Html.ActionLink("Edytuj", "EditPatient", "Edit", new { id = Model.Data.Id }, new Dictionary<string, object> { { "class", "btn btn-success" } })

        <form style="margin: 20px;" asp-action="ViewPatient" asp-controller="Presentation">
            <label>Szukaj</label>
            <input type="hidden" name="id" value="@(Model.Data.Id)">
            <div class="form-group row">
                <p class="col-sm-1 col-form-label" style="padding-top: 5px;">Data początkowa</p>
                <div class="col-sm-11">
                    <input type="date" name="startDate" style="width: 60px; min-width: 200px;" class="form-control" id="startDate" placeholder="Data początkowa">
                </div>
            </div>
            <div class="form-group row">
                <p class="col-sm-1 col-form-label" style="padding-top: 5px;">Data końcowa</p>
                <div class="col-sm-11">
                    <input type="date" name="endDate" style="width: 60px; min-width: 200px;" class="form-control" id="endDate" placeholder="Data końcowa">
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Szukaj</button>
        </form>
        @if (ViewBag.startDate != null)
        {
            <p class="btn-danger">data początkowa : @(ViewBag.startDate)</p>
        }

        @if (ViewBag.endDate != null)
        {
            <p class="btn-danger">data końcowa @(ViewBag.endDate)</p>
        }

        @if (Model?.Observations == null || Model.Observations.Count == 0)
        {
            <p>Brak obserwacji dla pacjenta</p>
        }

        <div class="tab-view">

            <div class="tab-header">
                @*generate buttons*@
                @foreach (var item in Model.ValueExaminations)
                {
                    var firstName = item.Value.First().Name;
                    if (item.Value.Count > 0 && !string.IsNullOrEmpty(firstName))
                    {
                        <button class="tab-item btn" onclick="drawChart(data@(item.Key.Replace("-","_")))">@(firstName)</button>
                    }
                }
            </div>
            <div id="tab" class="tab">
                <div style="width:100%;">
                    <canvas id="canvas"></canvas>
                </div>
            </div>
            @foreach (var item in Model.ValueExaminations)
            {

                var value = item.Value.First();
                if (item.Value.Count < 1 || string.IsNullOrEmpty(value.Name))
                {
                    continue;
                }

                <script>
                     var data@(item.Key.Replace("-", "_")) =
                            {
                                label: '@(value.Name)',
                                title: '@(value.Name)',
                                yUnits: 'kg',
                                xValues: @(Json.Serialize(item.Value.Select(x => x.Date.Value.ToString("dd-MM-yyyy")))),
                                yValues: @(Json.Serialize(item.Value.Select(x => x.Value)))
                            };
                </script>
            }
        </div>
        <script>
            $(document).ready(
                () => {
                    var ctx = document.getElementById('canvas').getContext('2d');
                    chartHanlder = new Chart(ctx, null);//ctx, config
                    drawChart(data@(Model.ValueExaminations.First().Key.Replace("-", "_")))
                }
            )
        </script>
    }
}


@Html.ActionLink("Powrót do listy pajcentów", "Patient", "Home", new { }, new Dictionary<string, object> { { "class", "btn btn-warning" } })


<div class="timeline">
    @foreach (var timelineObject in Model.TimelineObjects)
    {
        <div class="timeline-container @( (timelineIterator++%2==0)?"left":"right")">
            <div class="content observationType-simple-quantity">
                <p class="observation observation-date">@(timelineObject.Date.ToString("dd-MM-yyyy"))</p>
                <h2 class="observation observation-question">@(timelineObject.Header)</h2>
                <p class="observation observation-value">@(timelineObject.Description)</p>
                <p class="observation observation-code">@(timelineObject.Code)</p>
                <p class="observation observation-eventType">@(timelineObject.EventTypeName)</p>
            </div>
        </div>

    }
</div>
@Html.ActionLink("Powrót do listy pajcentów", "Patient", "Home", new { }, new Dictionary<string, object> { { "class", "btn btn-warning" } })
